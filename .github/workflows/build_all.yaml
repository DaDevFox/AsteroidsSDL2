name: "Asteroids Cross-Platform Build"
on: workflow_dispatch

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.previoustag.outputs.tag }}
      release_url: ${{steps.create_release.outputs.upload_url}}
    steps:
      - uses: actions/checkout@master
      - name: Get Version Number
        id: versionnum
        run: |
          echo "version=$(cat AsteroidsSDL/src/config.txt | head -2 | tail -1)" >> $GITHUB_OUTPUT

      - name: Concatenate 'v'
        id: versionvnum
        run: |
          echo "v_version=$(printf "v%s" ${{ steps.versionnum.outputs.version }})" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versionnum.outputs.version }}
          release_name: ${{ steps.versionvnum.outputs.v_version}}
          draft: false
          prerelease: false

  build_windows:
    runs-on: windows-latest
    needs: create_release
    steps:
      - uses: actions/checkout@master

      - name: Dependency | Fetch SDL
        uses: robinraju/release-downloader@v1.10
        with:
          repository: "libsdl-org/SDL"
          tag: "release-2.30.3"
          fileName: "SDL2-devel-2.30.3-VC.zip"

      - name: Dependency | Fetch SDL_ttf
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "libsdl-org/SDL_ttf"
          version: "tags/release-2.22.0"
          file: "SDL2_ttf-devel-2.22.0-VC.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dependency | Fetch SDL_image
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "libsdl-org/SDL_image"
          version: "tags/release-2.8.2"
          file: "SDL2_image-devel-2.8.2-VC.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dependency | Unzip SDL Libs
        run: |
          mkdir SDL2
          mkdir SDL2_ttf
          mkdir SDL2_image
          powershell -command "Expand-Archive -Force './SDL2-devel-2.30.3-VC.zip' 'SDL2'"
          powershell -command "Expand-Archive -Force './SDL2_image-devel-2.8.2-VC.zip' 'SDL2_image'"
          powershell -command "Expand-Archive -Force './SDL2_ttf-devel-2.22.0-VC.zip' 'SDL2_ttf'"
          chcp 65001 
          echo ("SDL2DIR=${{ github.workspace }}/SDL2/SDL2-2.30.3") >> $env:GITHUB_ENV
          echo ("SDL2IMAGEDIR=${{ github.workspace }}/SDL2_image/SDL2_image-2.8.2") >> $env:GITHUB_ENV
          echo ("SDL2TTFDIR=${{ github.workspace }}/SDL2_ttf/SDL2_ttf-2.22.0") >> $env:GITHUB_ENV

      - name: Configure and Build Project
        run: |
          cd AsteroidsSDL\src
          cmake . -G "Visual Studio 17 2022" -DCMAKE_CONFIGURATION_TYPES="Debug" -DSDL2_DIR=${{env.SDL2DIR}} -DSDL2IMAGEDIR=${{env.SDL2IMAGEDIR}} -DSDL2TTFLIBRARY=${{env.SDL2TTFDIR}} 
          cmake --build . -DSDL2_DIR=${{env.SDL2DIR}} -DSDL2IMAGEDIR=${{env.SDL2IMAGEDIR}} -DSDL2TTFLIBRARY=${{env.SDL2TTFDIR}} 

      - name: Run CPack
        run: |
          cd AsteroidsSDL\src
          Get-ChildItem -Recurse
          cpack -G "NSIS"

      - name: Zip Result
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          mkdir out
          copy /S .\AsteroidsSDL\src\packages\* .\out
          powershell -command "Compress-Archive '.\out\*' '.\Win64.zip'"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }} # This pulls from the CREATE RELEASE job above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./Win64.zip
          asset_name: Win64.zip
          asset_content_type: application/zip

  # TODO: Appimage and flatpak
  build_linux:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Install Dependencies
        id: dependencies
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
          sudo apt-get update -y -qq
          sudo apt install zip
          sudo apt-get install libsdl2-dev
          sudo apt-get install libsdl2-image-dev
          sudo apt-get install libsdl2-ttf-dev

      - uses: actions/checkout@master

      - name: Configure and Build Project
        uses: threeal/cmake-action@main
        with:
          source-dir: AsteroidsSDL/src
          build-dir: out

      - name: Zip Result
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          cp -r AsteroidsSDL/res/* out
          zip -r Linux.zip out

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }} # This pulls from the CREATE RELEASE job above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./Linux.zip
          asset_name: Linux.zip
          asset_content_type: application/zip

  build_macos:
    runs-on: macos-latest
    needs: create_release
    steps:
      - name: Install Dependencies
        id: dependencies
        run: |
          brew install sdl2
          brew install sdl2_image
          brew install sdl2_ttf

      - uses: actions/checkout@master

      - name: CMake Configure and Build
        uses: threeal/cmake-action@main
        with:
          source-dir: AsteroidsSDL/src
          build-dir: out

      - name: CMake Install
        run: |
          cd out
          cpack --config CPackSourceConfig.cmake 
          cpack --config CPackConfig.cmake 
          cd ../

      #TODO: work on certificate signing: https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
      - name: Zip Result
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          cp -r AsteroidsSDL/res/* out
          zip -y -r macOS.zip out -x out/_CPack_Packages/Darwin/DragNDrop/Asteroids-0.2.0-Darwin/Applications/Xcode_15.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.sdk/System/Library/Frameworks/Ruby.framework

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./macOS.zip
          asset_name: macOS.zip
          asset_content_type: application/zip
